ðŸ“Œ Stack vs Heap in Java & Memory Allocation

In Java, memory is divided into two main areas:

Stack Memory â†’ Stores method calls, local variables, and references.

Heap Memory â†’ Stores objects and instance variables.

ðŸ“Œ Stack Memory (LIFO â€“ Last In, First Out) (Static Memory Allocation)
âœ” Used for method execution and local variables.
âœ” Fast access, but limited in size.
âœ” Automatically allocated and deallocated when the method ends.
âœ” Each thread has its own stack (Thread-Safe).
âœ” Memory is allocated at compile-time (before execution).
âœ” Size is fixed and determined when the method starts.
âœ” Deallocation happens automatically when the method ends.
âœ” Does not grow dynamically at runtime.
âœ” A new stack is created for every function in the code.


ðŸ“Œ Heap Memory (Dynamic Memory Allocation)
âœ” Used for storing objects and instance variables.
âœ” Slower access than Stack but larger in size.
âœ” Objects in Heap remain until Garbage Collector removes them.
âœ” Shared across all threads (Not Thread-Safe).
âœ” Memory is allocated at runtime (not known at compile-time).
âœ” Objects can grow or shrink dynamically.
âœ” Garbage Collector manages deallocation, unlike Stack.
âœ” All the String objects are stored in an area called String Pool Constant.